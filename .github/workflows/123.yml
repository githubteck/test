name: Update M3U8 File

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 * * * *'  # Run every hour at minute 0

jobs:
  upload_m3u8:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up Python
    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    # Step 3: Install necessary Python dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    # Step 4: Run the Python script to fetch, parse, and upload M3U8 data
    - name: Run Python script
      run: |
        python3 <<EOF
        import requests
        import base64

        repo_owner = 'githubteck'  # Your GitHub username
        repo_name = 'test'  # Your GitHub repository name
        file_path = '123.m3u8'  # Path in the GitHub repository where the file will be uploaded
        access_token = "${{ secrets.ABC }}"  # Access the token securely from GitHub Secrets

        # Fetch raw data
        def fetch_tv_data():
            data_url = 'https://raw.githubusercontent.com/aseanic/aseanic.github.io/refs/heads/main/tv'
            response = requests.get(data_url)
            return response.text if response.status_code == 200 else None

        # Parse data
        def parse_channels(data):
            """Parse the TV data and convert it to M3U8 format."""
            lines = data.split('\\n')
            channels = []
            channel_info = []

            for line in lines:
                if line.strip() == '':
                    continue  # Ignore empty lines

                # Handle #KODIPROP for authorization
                if line.startswith("#KODIPROP:inputstream.adaptive.common_headers="):
                    # Extract the token and format it
                    token = line.split('=')[1]
                    formatted_line = f'#EXTHTTP:{{"Authorization":"{token}"}}'
                    channels.append(formatted_line)
                    continue

                # Handle #KODIPROP for drm_legacy (common formats)
                elif line.startswith("#KODIPROP:inputstream.adaptive.drm_legacy="):
                    parts = line.split('=')
                    if len(parts) != 2:
                        continue
                    
                    # Split on "|"
                    license_info = parts[1].split('|')
                    license_type = license_info[0].strip()  # e.g. com.widevine.alpha
                    license_keys = license_info[1].strip()  # e.g. the URL or keys

                    if ',' in license_keys:
                        # Handle multiple keys
                        key_pairs = license_keys.split(',')
                        license_key_dict = {}
                        for key_pair in key_pairs:
                            key, value = key_pair.split(':')
                            license_key_dict[key.strip()] = value.strip()

                        license_key_json = str(license_key_dict).replace("'", '"')  # Convert to JSON-like string
                        channels.append(f'#KODIPROP:inputstream.adaptive.license_type={license_type}')
                        channels.append(f'#KODIPROP:inputstream.adaptive.license_key={license_key_json}')
                    else:
                        # If only a single key, just format accordingly
                        channels.append(f'#KODIPROP:inputstream.adaptive.license_type={license_type}')
                        channels.append(f'#KODIPROP:inputstream.adaptive.license_key={license_keys}')

                    continue

                # If the line does not match any special formats, handle it as normal
                channel_info.append(line.strip())  # Assuming it's a normal line that we want to keep

            return channels

        # Upload data to GitHub
        def upload_to_github(content):
            file_content = base64.b64encode(content.encode()).decode()
            api_url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/contents/{file_path}'
            headers = {'Authorization': f'token {access_token}'}
            response = requests.get(api_url, headers=headers)
            sha = response.json().get('sha') if response.status_code == 200 else None
            
            if sha:
                existing_content = requests.get(api_url, headers=headers).json().get('content')
                if existing_content and base64.b64decode(existing_content).decode() == content:
                    print("No changes detected. Skipping upload.")
                    return

            data = {'message': 'Upload channels.m3u8 file', 'content': file_content}
            if sha:
                data['sha'] = sha
            
            upload_response = requests.put(api_url, json=data, headers=headers)

            if upload_response.status_code in [200, 201]:
                print("File uploaded successfully!")
            else:
                print(f"Failed to upload file. Status Code: {upload_response.status_code}")
                print(f"Response Content: {upload_response.text}")

        # Main execution
        raw_data = fetch_tv_data()
        if raw_data:
            channels = parse_channels(raw_data)
            m3u8_content = "\\n".join(channels)
            upload_to_github(m3u8_content)

        EOF
