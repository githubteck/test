 name: Fetch and process M3U8 data
        env:
          MY_GITHUB_TOKEN: ${{ secrets.ABC }}
        run: |
          python3 <<EOF
          import requests
          import base64
          import json
          import os

          repo_owner = "githubteck"
          repo_name = "test"
          file_path = "123.m3u8"
          branch = "main"
          github_token = os.getenv("MY_GITHUB_TOKEN")

          if not github_token:
              print("❌ GitHub token not found!")
              exit(1)

          source_url = "https://raw.githubusercontent.com/mystery75/streaming/refs/heads/app/TV"

          try:
              response = requests.get(source_url)
              response.raise_for_status()
              raw_lines = response.text.splitlines()
          except Exception as e:
              print(f"❌ Failed to fetch source: {e}")
              exit(1)

          filtered_lines = []
          for line in raw_lines:
              stripped = line.lstrip()
              if stripped.startswith("##"):
                  continue
              filtered_lines.append(line)
              if stripped == "#KODIPROP:inputstream.adaptive.license_type=clearkey":
                  filtered_lines.append("#EXTVLCOPT:http-user-agent=Mozilla/5.0 (Linux; Android 14; 27821-67832-42-315-4231-233-21-43-12-1312-321-23-21-232-) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Mobile Safari/537.36")

          content = "\n".join(filtered_lines)

          # Encode for GitHub API
          encoded_content = base64.b64encode(content.encode('utf-8')).decode('utf-8')
          api_url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/contents/{file_path}"

          headers = {
              "Authorization": f"token {github_token}",
              "Accept": "application/vnd.github.v3+json"
          }

          # Check if the file already exists
          response = requests.get(api_url, headers=headers)
          if response.status_code == 200:
              sha = response.json().get("sha")
              print("📄 File exists. Updating...")
          else:
              sha = None
              print("📄 File does not exist. Creating new file...")

          payload = {
              "message": "Auto-create or update 123.m3u8",
              "content": encoded_content,
              "branch": branch
          }

          if sha:
              payload["sha"] = sha

          upload = requests.put(api_url, headers=headers, data=json.dumps(payload))

          if upload.status_code in [200, 201]:
              print("✅ Upload successful.")
          else:
              print(f"❌ Upload failed: {upload.status_code} {upload.text}")
              exit(1)
          EOF
